generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(cuid())
  name        String
  description String
  group       String
  userId      String
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  billboards  Billboard[] @relation("StoreBillboard")
  categories  Category[]  @relation("StoretoCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(cuid())
  storeId    String
  label      String
  imageUrl   String
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  store      Store      @relation("StoreBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(cuid())
  storeId     String
  billboardId String
  name        String
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  store       Store     @relation("StoretoCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id       String    @id @default(cuid())
  storeId  String
  name     String
  value    String
  updateAt DateTime  @updatedAt
  createAt DateTime  @default(now())
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  product  Product[]

  @@index([storeId])
}

model Color {
  id       String    @id @default(cuid())
  storeId  String
  name     String
  value    String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product  Product[]

  @@index([storeId])
}

model Product {
  id         String      @id @default(cuid())
  storeId    String
  categoryId String
  name       String
  price      Float
  isFeature  Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  createAt   DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(cuid())
  productId String
  url       String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createAt   DateTime    @default(now())
  updateAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
